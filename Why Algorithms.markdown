# 왜 알고리즘과 자료구조를 배우나요?

코딩을 해본 적이 있다면 알고리즘과 데이터 구조에 대해 배우는 것이 무엇인지 궁금해 할 것입니다. 특히 공식적인 컴퓨터 과학이나 공학적 배경이없는 경우에는 더욱 그렇습니다.
결국 앱을 만들때 얼마나 자주 링크드 리스트나 자신만의 정렬된 루틴을 사용해야 할지 묻는다면, 그 대답은 거의 없다. 입니다.

#### **하지만...**
해매한 문제를 하결하기 위해 사용되는 알고리즘에 사용되는 전략에 대해 조금이라도 아는것은 자신의 코드를 개선할 수 있는 아이디어를 제공합니다.

표준 배열 또는 딕셔너리 보다 더 많은 자료구조를 아는 것이 자신만의 앱을 만들 때에 있어서 더 많은 도구모음(collection of tools)을얻을 수 있습니다.

이것들은 당신을 더 좋은 개발자로 만들어 줄 것입니다.! (And better developers make more $$$.)

#### 알고리즘은 자신이 빌드할 수 없었던 소프트웨어를 빌드할 수 있게 해줍니다.
저는 과거에 기초적인 문제에 막혀 만들수 없었던 앱들이 있습니다.

속도에서의 문제: 저는 프로그램을 추분히 빠르게 만들 수 없었습니다. 지금와서 다시 생각해보니 이 문제에서 저는 잘못된 알고리즘을 선택했던 것입니다. 만약 제가 **O(n)** and **O(n^2)**에 대한 차이를 알고 있었더라면 저는 좀더 운이 있었을 것입니다.

무식하게 브루투포스를 사용한다면 적은양의 데이터에서는 잘 작동할지 몰라도 데이터의 양이 많아질 수록 제대로 작동하지 않을것입니다. 그래서 더 적절한 알고리즘이 필요합니다.

프로그래밍 문제를 전혀 해결하지 못하던 시기도 있었습니다. 단순히 어디서 시작해야할지도 몰랐습니다. 조금씩 알고리즘의 이론을 이해할 수록 더 다양한 방법으로 문제를 접근할 수 있게 됩니다.

#### 단순히 알고리즘을 기억하는 것에 목매지마세요

알고리즘을 기억하려고 하는 대신에 어떻게 서로 다른 알고리즘들이 다른 문제들에 대해 접근 하는지를 이해하려고 노력하세요

— divide-and-conquer, dynamic programming, greedy algorithms —등과 같은 기술에 대해서 배우고, 어떤게 접근을 느리게 또는 빠르게 하는지를 보고 어떤식으로 타협할지 배워보세요.

결국 핵심은 어떻게 컴퓨터를 작동하게 할지에 대한 통찰력을 기르는 데에 있습니다.

#### 생각보다 무섭지 않습니다.

많은 알고리즘 교과서는 많은 수학으로 시작합니다. 사실 수학은 유용하지만 항상 그런것 만은 아닙니다. 거기에 겁먹지 마세요. 만약 코드를 작성할 줄 안다면, 이러한 모든 멋진 알고리즘과 데이터 구조를 이해할 수 있습니다.

저를 믿으세요. 알고리즘은 재밌습니다! :-)
